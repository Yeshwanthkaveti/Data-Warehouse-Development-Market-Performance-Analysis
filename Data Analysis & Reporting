-- Database exploration: Exploring objects in the database --
-- List all tables in the database
select * from information_schema.TABLES;

-- Checking the content of the dimension_customers table
select * from Gold.dimension_customers;

-- Dimension Exploration: Get distinct data from key dimensions --
-- List distinct countries in dimension_customers
select distinct country from gold.dimension_customers;

-- List distinct categories, subcategories, and product names from dimension_products
select distinct category, subcategory, product_name from gold.dimension_products
order by 1, 2, 3;

-- Date Exploration: Find earliest and latest dates --
-- Determine the range of months between earliest and latest sales orders
select min(order_date) as earliest_order_date,
       max(order_date) as latest_order_date,
       datediff(MONTH, min(order_date), max(order_date)) as range_of_month
from gold.facts_sales;

-- Find the youngest and oldest customer by birthdate
select min(birthdate) as oldest_birthdate,
       datediff(year, min(birthdate), getdate()) as [age of oldest customer],
       max(birthdate) as youngest_birthdate,
       datediff(year, max(birthdate), getdate()) as [age of youngest customer]
from gold.dimension_customers;

-- Measure Exploration: Show key metrics --
-- Total sales
select sum(sales_amount) as total_sales from gold.facts_sales;

-- Total items sold
select sum(quantity) as total_quantity from gold.facts_sales;

-- Average selling price
select avg(price) as avg_price from gold.facts_sales;

-- Total number of orders
select count(order_number) as total_order from gold.facts_sales;

-- Total number of products
select count(product_name) as total_products from gold.dimension_products;

-- Total number of customers
select count(customer_key) as total_customers from gold.dimension_customers;

-- Total number of customers who placed an order
select count(distinct customer_key) as total_distinct_customers from gold.dimension_customers;

-- Magnitude Analysis: Compare measures by categories --
-- Total customers by country
select country,
       count(customer_key) as total_customers
from gold.dimension_customers
group by country
order by total_customers desc;

-- Total customers by gender
select gender,
       count(customer_key) as total_customers
from gold.dimension_customers
group by gender
order by total_customers desc;

-- Total products by category
select category,
       count(product_key) as total_products
from gold.dimension_products
group by category
order by total_products desc;

-- Average cost by category
select category,
       avg(cost) as avg_cost
from gold.dimension_products
group by category
order by avg_cost desc;

-- Total revenue generated by category
select p.category,
       sum(f.sales_amount) as total_revenue
from gold.facts_sales as f
left join gold.dimension_products as p
on p.product_key = f.product_key
group by p.category
order by total_revenue desc;

-- Ranking Analysis: Find top and bottom performers --
-- Top 5 products by total revenue
select top 5
       p.product_name,
       sum(f.sales_amount) as total_revenue
from gold.facts_sales as f
left join gold.dimension_products as p
on p.product_key = f.product_key
group by p.product_name
order by total_revenue desc;

-- Bottom 5 products by total revenue
select top 5
       p.product_name,
       sum(f.sales_amount) as total_revenue
from gold.facts_sales as f
left join gold.dimension_products as p
on p.product_key = f.product_key
group by p.product_name
order by total_revenue;

-- Change Over Time Analysis: Track trends and identify seasonality --
-- Sales performance by month
select month(order_date) as order_month,
       sum(sales_amount) as total_sales,
       count(distinct customer_key) as total_customers,
       sum(quantity) as total_quantity
from gold.facts_sales
where order_date is not null
group by month(order_date)
order by month(order_date);

-- Cumulative Analysis: Running total of sales over time
select order_date,
       total_sales,
       sum(total_sales) over (partition by order_date order by order_date) as running_total_sales,
       avg(avg_price) over(Order by order_date) as Moving_average_price
from (
    select datetrunc(YEAR, order_date) as order_date,
           sum(sales_amount) as total_sales,
           avg(price) as avg_price
    from gold.facts_sales
    where order_date is not null
    group by datetrunc(year, order_date)
) t;

-- Performance Analysis: Compare current performance to target --
-- Yearly performance analysis of products by sales
with yearly_product_sales as (
    select year(f.order_date) as order_year,
           p.product_name,
           sum(f.sales_amount) as current_sales
    from gold.facts_sales as f
    left join gold.dimension_products as p
    on f.product_key = p.product_key
    where f.order_date is not null
    group by year(f.order_date), p.product_name
)
select *,
       avg(current_sales) over(partition by product_name) as avg_sales,
       current_sales - avg(current_sales) over(partition by product_name) as diff_avg,
       case when current_sales - avg(current_sales) over(partition by product_name) > 0 then 'above average'
            when current_sales - avg(current_sales) over(partition by product_name) < 0 then 'below average'
            else 'avg'
       end as avg_change,
       lag(current_sales) over(partition by product_name order by order_year) as previous_year_sales,
       current_sales - lag(current_sales) over(partition by product_name order by order_year) as diff_py,
       case when current_sales - lag(current_sales) over(partition by product_name order by order_year) > 0 then 'increase'
            when current_sales - lag(current_sales) over(partition by product_name order by order_year) < 0 then 'decrease'
            else 'no change'
       end as 'change'
from yearly_product_sales
order by product_name, current_sales;

-- Part to Whole Analysis: Proportional analysis --
-- Categories contributing the most to overall sales
with category_sales as (
    select category,
           sum(sales_amount) as total_sales
    from gold.facts_sales as f
    left join gold.dimension_products as p
    on p.product_key = f.product_key
    group by category
)
select category,
       total_sales,
       sum(total_sales) over() as overall_sales,
       round((cast(total_sales as float)/sum(total_sales) over())*100, 2) as percentage_of_total
from category_sales
order by total_sales desc;

-- Data Segmentation: Segment products based on cost ranges --
with segmentation_product as (
    select product_key,
           product_name,
           cost,
           case when cost < 100 then 'below 100'
                when cost between 100 and 500 then '100-500'
                when cost between 500 and 1000 then '500-1000'
                else 'above 1000'
           end as cost_range
    from gold.dimension_products
)
select cost_range,
       count(product_key) as total_product
from segmentation_product
group by cost_range;

-- Segment customers based on their spending behavior --
with customer_spending as (
    select c.customer_key,
           sum(f.sales_amount) as total_spending,
           min(order_date) as first_order,
           max(order_date) as last_order,
           datediff(month, min(order_date), max(order_date)) as lifespan
    from gold.facts_sales f
    LEFT JOIN gold.dimension_customers c
    on f.customer_key = c.customer_key
    group by c.customer_key
)
select customer_segment,
       count(customer_key) as total_customers
from (
    select customer_key,
           case 
               when lifespan >= 12 AND total_spending > 5000 then 'VIP'
               when lifespan >= 12 AND total_spending <= 5000 then 'Regular'
               else 'New'
           end as customer_segment
    from customer_spending
) AS segmented_customers
group by customer_segment
order by total_customers desc;

-- Reporting Writing: Final report view for customers --
create view gold.report_customers as 
with base_query_table as (
    select f.order_number,
           f.product_key,
           f.order_date,
           f.sales_amount,
           f.quantity,
           c.customer_key,
           c.customer_number,
           concat(c.first_name, ' ', c.last_name) as customer_name,
           datediff(year, c.birthdate, getdate()) as age
    from gold.facts_sales as f
    left join gold.dimension_customers as c
    on c.customer_key = f.customer_key
    where order_date is not null
),
customer_aggregation as (
    select customer_key,
           customer_number,
           customer_name,
           age,
           count(distinct order_number) as total_orders,
           sum(sales_amount) as total_sales,
           sum(quantity) as total_quantity,
           count(distinct product_key) as total_products,
           max(order_date) as last_order,
           datediff(month, min(order_date), max(order_date)) as lifespan
    from base_query_table
    group by customer_key, customer_number, customer_name, age
)
select customer_key,
       customer_number,
       customer_name,
       age,
       case when age < 20 then 'under 20'
            when age between 20 and 29 then '20-29'
            when age between 30 and 39 then '30-39'
            when age between 40 and 49 then '40-49'
            else '50 and above'
       end as age_group,
       case when lifespan >= 12 AND total_sales > 5000 then 'VIP'
            when lifespan >= 12 AND total_sales <= 5000 then 'Regular'
            else 'New'
       end as customer_segment,
       last_order,
       datediff(month, last_order, getdate()) as recency,
       total_orders,
       total_sales,
       total_quantity,
       total_products,
       lifespan,
       case when total_orders = 0 then 0
            else total_sales / total_orders
       end as avg_order_value,
       case when lifespan = 0 then total_sales
            else total_sales / lifespan
       end as avg_monthly_spend
from customer_aggregation;

-- Final query to execute the report from the view --
select * from gold.report_customers;

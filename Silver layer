-- Cleaning and transforming data in the Bronze layer, then loading it into the Silver layer

CREATE OR ALTER PROCEDURE silver.load_silver AS 
BEGIN
    DECLARE @start_time DATETIME, @end_time DATETIME, @batchstart_time DATETIME, @batchend_time DATETIME;
    
    BEGIN TRY
        SET @batchstart_time = GETDATE();
        PRINT 'Starting data load into the Silver layer...';
        
        -- Loading cleaned customer information
        PRINT '>> Loading silver.crm_cust_info';
        SET @start_time = GETDATE();
        TRUNCATE TABLE silver.crm_cust_info;
        INSERT INTO silver.crm_cust_info (cst_id, cst_key, cst_firstname, cst_lastname, cst_material_status, cst_gndr, cst_create_date)
        SELECT 
            cst_id,
            cst_key,
            TRIM(cst_firstname) AS cst_firstname,
            TRIM(cst_lastname) AS cst_lastname,
            CASE 
                WHEN UPPER(TRIM(cst_material_status)) = 'M' THEN 'Married'
                WHEN UPPER(TRIM(cst_material_status)) = 'S' THEN 'Single'
                ELSE 'N/A' 
            END AS cst_material_status,
            CASE 
                WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
                WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
                ELSE 'N/A' 
            END AS cst_gndr,
            cst_create_date
        FROM (
            SELECT *, ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS Flag_last
            FROM bronze.crm_cust_info
            WHERE cst_id IS NOT NULL
        ) t
        WHERE Flag_last = 1;
        
        SET @end_time = GETDATE();
        PRINT 'Load duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';
        
        PRINT 'Starting the silver layer load from CRM tables';
SET @start_time = GETDATE();

-- Clearing existing data
TRUNCATE TABLE silver.crm_prd_info;
PRINT '>> Inserting records into silver.crm_prd_info';

-- Inserting transformed data
INSERT INTO silver.crm_prd_info (
    prd_id,
    cat_id,
    prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
)
SELECT
    prd_id,
    REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS cat_id,
    SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,
    prd_nm,
    ISNULL(prd_cost, 0) AS prd_cost,
    CASE
        WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
        WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
        WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
        WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
        ELSE 'N/A'
    END AS prd_line,
    CAST(prd_start_dt AS DATE) AS prd_start_dt,
    CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE) AS prd_end_dt
FROM bronze.crm_prd_info;

SET @end_time = GETDATE();
PRINT 'Load duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';

-- Purging existing data from crm_sales_details before loading into the silver layer
PRINT 'Initiating silver layer load from CRM tables';
SET @start_time = GETDATE();

-- Clearing data
TRUNCATE TABLE silver.crm_sales_details;
PRINT '>> Inserting records into silver.crm_sales_details';

-- Inserting refined data
INSERT INTO silver.crm_sales_details (
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
)
SELECT 
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    CASE 
        WHEN sls_order_dt = 0 OR LEN(sls_order_dt) <> 8 THEN NULL
        ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
    END AS sls_order_dt,
    CASE 
        WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) <> 8 THEN NULL
        ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
    END AS sls_ship_dt,
    CASE 
        WHEN sls_due_dt = 0 OR LEN(sls_due_dt) <> 8 THEN NULL
        ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
    END AS sls_due_dt,
    CASE 
        WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales <> sls_quantity * ABS(sls_price) 
        THEN sls_quantity * ABS(sls_price)
        ELSE sls_sales
    END AS sls_sales, 
    sls_quantity,
    CASE 
        WHEN sls_price IS NULL OR sls_price <= 0 
        THEN sls_sales / NULLIF(sls_quantity, 0)
        ELSE sls_price  -- Compute price if the original value is invalid
    END AS sls_price
FROM bronze.crm_sales_details;

SET @end_time = GETDATE();
PRINT 'Load duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';

PRINT 'Initiating the silver layer load from ERP tables';
SET @start_time = GETDATE();

-- Clearing previous records
TRUNCATE TABLE silver.erp_cust_az12;
PRINT '>> Populating silver.erp_cust_az12 with new data';

-- Inserting transformed data
INSERT INTO silver.erp_cust_az12 (cid, bdate, gen)
SELECT 
    CASE 
        WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
        ELSE cid
    END AS cid,
    CASE 
        WHEN bdate > GETDATE() THEN NULL
        ELSE bdate 
    END AS bdate,
    CASE 
        WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
        WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
        ELSE 'N/A'
    END AS gen
FROM bronze.erp_cust_az12;

SET @end_time = GETDATE();
PRINT 'Processing time: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';

-- Cleaning data from erp_loc_101 in the bronze layer and loading it into the silver layer --
PRINT 'Loading data into the silver layer from ERP tables';
SET @start_time = GETDATE();

-- Clear the existing data in the target table
TRUNCATE TABLE silver.erp_loc_a101;
PRINT '>> Inserting data into silver.erp_loc_a101';

-- Insert cleaned and transformed data
INSERT INTO silver.erp_loc_a101
    (cid, cntry)
SELECT
    REPLACE(cid, '-', '') AS cid,
    CASE 
        WHEN TRIM(cntry) = 'DE' THEN 'Germany'
        WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
        WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'N/A'
        ELSE TRIM(cntry)
    END AS cntry
FROM bronze.erp_loc_a101;

SET @end_time = GETDATE();
PRINT 'Load duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';

-- Cleaning data from erp_px_cat_g1v2 in the bronze layer and loading it into the silver layer --
PRINT 'Loading data into the silver layer from ERP tables';
SET @start_time = GETDATE();

-- Clear the existing data in the target table
TRUNCATE TABLE silver.erp_px_cat_g1v2;
PRINT '>> Inserting data into silver.erp_px_cat_g1v2';

-- Insert data as is (no transformation needed)
INSERT INTO silver.erp_px_cat_g1v2
    (id, cat, subcat, maintenance)
SELECT 
    id,
    cat,
    subcat,
    maintenance
FROM bronze.erp_px_cat_g1v2;

SET @end_time = GETDATE();
PRINT 'Load duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds';        
SET @batchend_time = GETDATE();
PRINT 'Total load duration for Silver layer: ' + CAST(DATEDIFF(SECOND, @batchstart_time, @batchend_time) AS NVARCHAR) + ' seconds';
    
    END TRY
    BEGIN CATCH
        PRINT 'Error occurred while loading data into Silver layer';
        PRINT 'Error message: ' + ERROR_MESSAGE();
    END CATCH
END;
